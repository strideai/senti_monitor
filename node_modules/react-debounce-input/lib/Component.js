'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DebounceInput = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _ReactComponentWithPureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DebounceInput = exports.DebounceInput = _react2.default.createClass({
  displayName: 'DebounceInput',

  propTypes: {
    element: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.func]),
    type: _react2.default.PropTypes.string,
    onChange: _react2.default.PropTypes.func.isRequired,
    onKeyDown: _react2.default.PropTypes.func,
    onBlur: _react2.default.PropTypes.func,
    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),
    minLength: _react2.default.PropTypes.number,
    debounceTimeout: _react2.default.PropTypes.number,
    forceNotifyByEnter: _react2.default.PropTypes.bool,
    forceNotifyOnBlur: _react2.default.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      element: 'input',
      type: 'text',
      minLength: 0,
      debounceTimeout: 100,
      forceNotifyByEnter: true,
      forceNotifyOnBlur: true
    };
  },
  getInitialState: function getInitialState() {
    return {
      value: this.props.value || ''
    };
  },
  componentWillMount: function componentWillMount() {
    this.createNotifier(this.props.debounceTimeout);
  },
  componentWillReceiveProps: function componentWillReceiveProps(_ref) {
    var value = _ref.value;
    var debounceTimeout = _ref.debounceTimeout;

    if (this.isDebouncing) {
      return;
    }
    if (typeof value !== 'undefined' && this.state.value !== value) {
      this.setState({ value: value });
    }
    if (debounceTimeout !== this.props.debounceTimeout) {
      this.createNotifier(debounceTimeout);
    }
  },


  shouldComponentUpdate: _ReactComponentWithPureRenderMixin.shouldComponentUpdate,

  componentWillUnmount: function componentWillUnmount() {
    if (this.notify.flush) {
      this.notify.flush();
    }
  },


  isDebouncing: false,

  createNotifier: function createNotifier(debounceTimeout) {
    var _this = this;

    if (debounceTimeout < 0) {
      this.notify = function () {
        return null;
      };
    } else if (debounceTimeout === 0) {
      this.notify = this.doNotify;
    } else {
      (function () {
        var debouncedChangeFunc = (0, _lodash2.default)(function (event) {
          _this.isDebouncing = false;
          _this.doNotify(event);
        }, debounceTimeout);

        _this.notify = function (event) {
          _this.isDebouncing = true;
          debouncedChangeFunc(event);
        };
      })();
    }
  },
  doNotify: function doNotify() {
    var onChange = this.props.onChange;


    onChange.apply(undefined, arguments);
  },
  forceNotify: function forceNotify(event) {
    if (!this.isDebouncing) {
      return;
    }

    if (this.notify.cancel) {
      this.notify.cancel();
      this.isDebouncing = false;
    }

    var value = this.state.value;
    var minLength = this.props.minLength;


    if (value.length >= minLength) {
      this.doNotify(event);
    } else {
      this.doNotify(_extends({}, event, { target: _extends({}, event.target, { value: value }) }));
    }
  },
  onChange: function onChange(event) {
    var _this2 = this;

    event.persist();

    var oldValue = this.state.value;

    this.setState({ value: event.target.value }, function () {
      var value = _this2.state.value;


      if (value.length >= _this2.props.minLength) {
        _this2.notify(event);
        return;
      }

      // If user hits backspace and goes below minLength consider it cleaning the value
      if (oldValue.length > value.length) {
        _this2.notify(_extends({}, event, { target: _extends({}, event.target, { value: '' }) }));
      }
    });
  },
  render: function render() {
    var _this3 = this;

    var _props = this.props;
    var element = _props.element;
    var _onChange = _props.onChange;
    var _value = _props.value;
    var _minLength = _props.minLength;
    var _debounceTimeout = _props.debounceTimeout;
    var forceNotifyByEnter = _props.forceNotifyByEnter;
    var forceNotifyOnBlur = _props.forceNotifyOnBlur;
    var _onKeyDown = _props.onKeyDown;
    var _onBlur = _props.onBlur;

    var props = _objectWithoutProperties(_props, ['element', 'onChange', 'value', 'minLength', 'debounceTimeout', 'forceNotifyByEnter', 'forceNotifyOnBlur', 'onKeyDown', 'onBlur']);

    var maybeOnKeyDown = forceNotifyByEnter ? {
      onKeyDown: function onKeyDown(event) {
        if (event.key === 'Enter') {
          _this3.forceNotify(event);
        }
        // Invoke original onKeyDown if present
        if (_onKeyDown) {
          _onKeyDown(event);
        }
      }
    } : {};

    var maybeOnBlur = forceNotifyOnBlur ? {
      onBlur: function onBlur(event) {
        _this3.forceNotify(event);
        // Invoke original onBlur if present
        if (_onBlur) {
          _onBlur(event);
        }
      }
    } : {};

    return _react2.default.createElement(element, _extends({}, props, {
      onChange: this.onChange,
      value: this.state.value
    }, maybeOnKeyDown, maybeOnBlur));
  }
});
//# sourceMappingURL=Component.js.map